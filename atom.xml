<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lxt</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-14T10:15:09.208Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lv</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>优化Gradle的配置文件</title>
    <link href="http://yoursite.com/2017/11/15/003_dependency_gradle/"/>
    <id>http://yoursite.com/2017/11/15/003_dependency_gradle/</id>
    <published>2017-11-15T02:47:01.000Z</published>
    <updated>2018-08-14T10:15:09.208Z</updated>
    
    <content type="html"><![CDATA[<p>在配置gradle依赖库的时候，一直习惯把build.gradle的某些项目的地址和版本写在另一份gradle文件里面。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_7</span><br><span class="line">    targetCompatibility = JavaVersion.VERSION_1_7</span><br><span class="line"></span><br><span class="line">    versions = [</span><br><span class="line"><span class="symbol">            infuserVersion:</span> <span class="string">'1.0.0'</span>,</span><br><span class="line"><span class="symbol">            supportVersion:</span> <span class="string">'26.+'</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    groupId = <span class="string">"com.lure.infuser"</span></span><br><span class="line">    siteUrl = <span class="string">"https://github.com/lxt352/Infuser"</span></span><br><span class="line">    gitUrl = <span class="string">"https://github.com/lxt352/Infuser.git"</span></span><br><span class="line"></span><br><span class="line">    supportV7 = <span class="string">"com.android.support:appcompat-v7:$&#123;versions.supportVersion&#125;"</span></span><br><span class="line">    infuserAnnotation = <span class="string">"com.lure.infuser:annotation:$&#123;versions.infuserVersion&#125;"</span></span><br><span class="line">    supportAnnotation = <span class="string">"com.android.support:support-annotations:$&#123;versions.supportVersion&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果配置文件只添加在module下，可以直接进行引用。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> <span class="string">"dependency.gradle"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> lib = rootProject.ext</span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation lib.supportV7</span><br><span class="line">    implementation lib.supportAnnotation</span><br><span class="line">    api lib.infuserAnnotation</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="不足"><a href="#不足" class="headerlink" title="不足"></a>不足</h3><p>在使用的开源项目较多时，类别划分的重要性就体现出来了，分类的好坏给人的感觉也是不一样的。</p><p><img src="http://ozc61ychw.bkt.clouddn.com/gradle_category.jpeg" alt="gradle dependency"></p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p> 依据项目的关联性或者功能进行划分，例如依赖Dagger时需要用到另外两个相关的项目。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> dagger() &#123;</span><br><span class="line">    dependencies.add(<span class="string">"implementation"</span>, <span class="string">"com.google.dagger:dagger:2.0.2"</span>)</span><br><span class="line">    dependencies.add(<span class="string">"annotationProcessor"</span>, <span class="string">"com.google.dagger:dagger-compiler:2.0.2"</span>)</span><br><span class="line">    dependencies.add(<span class="string">"provided"</span>, <span class="string">"javax.annotation:jsr250-api:1.0"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    dagger()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>简化。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> dagger() &#123;</span><br><span class="line">    dependencies.implementation <span class="string">'com.google.dagger:dagger:2.0.2'</span></span><br><span class="line">    dependencies.implementation <span class="string">'com.google.dagger:dagger-compiler:2.0.2'</span></span><br><span class="line">    dependencies.provided <span class="string">'javax.annotation:jsr250-api:1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    dagger()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 闭包具有一个代理对象(delegate object)，可以对Closure的代理对象进行赋值操作。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> injectDependency(Closure closure) &#123;</span><br><span class="line">     closure.delegate = dependencies</span><br><span class="line">     <span class="keyword">return</span> closure</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> retrofit = injectDependency &#123;</span><br><span class="line">     implementation <span class="string">'com.squareup.retrofit2:retrofit:2.0.2'</span></span><br><span class="line">     implementation <span class="string">'com.squareup.retrofit2:converter-gson:2.0.2'</span></span><br><span class="line">     implementation <span class="string">'com.squareup.okhttp3:logging-interceptor:3.2.0'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dependencies &#123;</span><br><span class="line">     dagger()</span><br><span class="line">     retrofit()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p> 如果想要对版本进行统一管理，可以抽取版本信息。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ext &#123;</span><br><span class="line">    versions = [</span><br><span class="line">            <span class="string">retrofitVersion :</span> <span class="string">'2.0.2'</span>,</span><br><span class="line"><span class="symbol">            logInterceptorVersion:</span> <span class="string">'3.2.0'</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> injectDependency(Closure closure) &#123;</span><br><span class="line">     closure.delegate = dependencies</span><br><span class="line">     <span class="keyword">return</span> closure</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">def</span> retrofit = injectDependency &#123;</span><br><span class="line">     implementation <span class="string">'com.squareup.retrofit2:retrofit:$&#123;versions.retrofitVersion&#125;'</span></span><br><span class="line">     implementation <span class="string">'com.squareup.retrofit2:converter-gson:$&#123;versions.retrofitVersion&#125;'</span></span><br><span class="line">     implementation <span class="string">'com.squareup.okhttp3:logging-interceptor:$&#123;versions.logInterceptorVersion&#125;'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> dependencies &#123;</span><br><span class="line">     dagger()</span><br><span class="line">     retrofit()</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>最后引用依赖。<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">from:</span> <span class="string">"dependency.gradle"</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在配置gradle依赖库的时候，一直习惯把build.gradle的某些项目的地址和版本写在另一份gradle文件里面。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ext &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sourceCompatibility = JavaVersion.VERSION_1_7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    targetCompatibility = JavaVersion.VERSION_1_7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    versions = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;            infuserVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;1.0.0&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;            supportVersion:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;26.+&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    groupId = &lt;span class=&quot;string&quot;&gt;&quot;com.lure.infuser&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    siteUrl = &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/lxt352/Infuser&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gitUrl = &lt;span class=&quot;string&quot;&gt;&quot;https://github.com/lxt352/Infuser.git&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supportV7 = &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:appcompat-v7:$&amp;#123;versions.supportVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    infuserAnnotation = &lt;span class=&quot;string&quot;&gt;&quot;com.lure.infuser:annotation:$&amp;#123;versions.infuserVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    supportAnnotation = &lt;span class=&quot;string&quot;&gt;&quot;com.android.support:support-annotations:$&amp;#123;versions.supportVersion&amp;#125;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="gradle" scheme="http://yoursite.com/tags/gradle/"/>
    
      <category term="groovy" scheme="http://yoursite.com/tags/groovy/"/>
    
  </entry>
  
  <entry>
    <title>Infuser 轻量级的依赖注入</title>
    <link href="http://yoursite.com/2017/11/15/002_infuser_library/"/>
    <id>http://yoursite.com/2017/11/15/002_infuser_library/</id>
    <published>2017-11-15T02:43:00.000Z</published>
    <updated>2018-08-14T10:15:09.208Z</updated>
    
    <content type="html"><![CDATA[<p>在日常工作中，使用一个类的时候难免会把其他类的对象作为自己内部的变量，由此可见依赖注入的高出现率。在很早的时候就有<a href="https://github.com/google/dagger" target="_blank" rel="noopener">Dagger</a>开源项目，用过的人都知道它功能的全面性，但也正是由于功能全，在依赖的情况较多时，编译会变的非常慢。在只想创建具有空参或者基本类型参数的类的对象时，有没有更好的轮子呢，答案是肯定的，这时候就可以使用Infuser。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><ul><li>支持空参构造器</li><li>支持 <code>String</code>以及基本类型数组作为参数，包括<code>int</code> <code>long</code> <code>float</code> <code>double</code> <code>char</code><a id="more"></a></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li><p>通过<code>Infuser.bind(this)</code>绑定当前对象，该方法具有<code>@NonNull</code>和<code>@UiThread</code>注解，因此返回值Binder对象不能为空，并且方法是在主线程中执行的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="meta">@UiThread</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Binder <span class="title">bind</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> createBinder(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构建返回值<code>Binder</code>，即要查找的自动生成的类的对象，统一实现了Binder接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Binder <span class="title">createBinder</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = object.getClass();</span><br><span class="line">    Constructor&lt;? extends Binder&gt; constructor = findBinderConstructorForClass(clazz);</span><br><span class="line">    <span class="keyword">if</span> (constructor == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> Binder.BINDER_EMPTY;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> constructor.newInstance(object);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Unable to create new instance "</span> + constructor, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建依赖的对象，获取该对象的<code>Class</code>对象，通过<code>Class</code>对象获取<code>Constructor</code>对象，最后创建实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity_ConstructorBinder</span> <span class="keyword">implements</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@UiThread</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MainActivity_ConstructorBinder</span><span class="params">(MainActivity object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; singerClass = Class.forName(<span class="string">"com.lxt.simple.Singer"</span>);</span><br><span class="line">        Constructor&lt;?&gt; constructor = singerClass.getConstructor(<span class="keyword">double</span>.class,<span class="keyword">double</span>.class,<span class="keyword">double</span>.class);</span><br><span class="line">        object.singer = (com.lxt.simple.Singer)(constructor.newInstance(<span class="number">20000.0</span>,<span class="number">222222.0</span>,<span class="number">250000.0</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>在<a href="https://github.com/lxt352/Infuser" target="_blank" rel="noopener">Github</a>上使用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在日常工作中，使用一个类的时候难免会把其他类的对象作为自己内部的变量，由此可见依赖注入的高出现率。在很早的时候就有&lt;a href=&quot;https://github.com/google/dagger&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Dagger&lt;/a&gt;开源项目，用过的人都知道它功能的全面性，但也正是由于功能全，在依赖的情况较多时，编译会变的非常慢。在只想创建具有空参或者基本类型参数的类的对象时，有没有更好的轮子呢，答案是肯定的，这时候就可以使用Infuser。&lt;/p&gt;
&lt;h3 id=&quot;功能&quot;&gt;&lt;a href=&quot;#功能&quot; class=&quot;headerlink&quot; title=&quot;功能&quot;&gt;&lt;/a&gt;功能&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;支持空参构造器&lt;/li&gt;
&lt;li&gt;支持 &lt;code&gt;String&lt;/code&gt;以及基本类型数组作为参数，包括&lt;code&gt;int&lt;/code&gt; &lt;code&gt;long&lt;/code&gt; &lt;code&gt;float&lt;/code&gt; &lt;code&gt;double&lt;/code&gt; &lt;code&gt;char&lt;/code&gt;
    
    </summary>
    
    
      <category term="library" scheme="http://yoursite.com/tags/library/"/>
    
      <category term="依赖注入" scheme="http://yoursite.com/tags/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>误删博客有感</title>
    <link href="http://yoursite.com/2017/11/15/001_sacrifice/"/>
    <id>http://yoursite.com/2017/11/15/001_sacrifice/</id>
    <published>2017-11-15T02:00:00.000Z</published>
    <updated>2018-08-14T10:15:09.192Z</updated>
    
    <content type="html"><![CDATA[<p>在某个阴雨连绵的饭后，午觉醒来开始工作，突然想起来博客少了个说明，想要写几句话加进去。鬼使神差地打开编辑工具，编写、提交，部署完成之后发现博客打不开了，猜想可能是不小心把本地配置文件删掉了，于是删掉本地分支想拉远端代码重新部署一次。随后，貌似走神或者短路，把远端的资源文件分支直接删除了。经过血的教训，明白无论是工作还是在个人闲暇的时间写东西都要认真仔细。今天心情貌似平复了许多，打算根据模糊的记忆重新写一份，毕竟记录是个好习惯。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在某个阴雨连绵的饭后，午觉醒来开始工作，突然想起来博客少了个说明，想要写几句话加进去。鬼使神差地打开编辑工具，编写、提交，部署完成之后发现博客打不开了，猜想可能是不小心把本地配置文件删掉了，于是删掉本地分支想拉远端代码重新部署一次。随后，貌似走神或者短路，把远端的资源文件分
      
    
    </summary>
    
    
  </entry>
  
</feed>
